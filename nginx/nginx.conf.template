events {
    worker_connections 1024;
}

http {
    upstream app_backend {
        server blue:8080 max_fails=2 fail_timeout=3s;
        server green:8080 backup;
    }

    server {
        listen 8080;
        
        # Health check endpoint for load balancer
        location /healthz {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location / {
            proxy_pass http://app_backend;
            
            # Critical failover settings
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 3s;
            
            # Timeout settings for quick failure detection
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 5s;
            
            # Header forwarding - CRITICAL for task requirements
            proxy_pass_header Server;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_hide_header X-Powered-By;
            
            # Preserve original client info
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

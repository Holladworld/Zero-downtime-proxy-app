events {
    worker_connections 1024;
}

http {
    # Add this for better error logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr status: $upstream_status';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    upstream app_backend {
        server blue:8080 max_fails=1 fail_timeout=2s;
        server green:8080 backup;
    }

    server {
        listen 8080;

        location / {
            proxy_pass http://app_backend;
            
            # CRITICAL: Failover settings
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 1;
            proxy_next_upstream_timeout 2s;
            
            # Fast timeouts for quick failure detection
            proxy_connect_timeout 1s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            
            # Buffer settings - important for failover
            proxy_buffering off;
            
            # Header preservation
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }
    }
}
